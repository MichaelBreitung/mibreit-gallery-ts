var u=Object.defineProperty;var c=(r,e,l)=>e in r?u(r,e,{enumerable:!0,configurable:!0,writable:!0,value:l}):r[e]=l;var t=(r,e,l)=>c(r,typeof e!="symbol"?e+"":e,l);import h from"./HorizontalScroller.js";class _{constructor(e){t(this,"_scroller");t(this,"_layout");t(this,"_scrollIndexChangedCallbacks",new Array);t(this,"_currentScrollIndex",0);this._layout=e,this._scroller=new h(e.getScrollerContainer())}reinitSize(){this._layout.reinitSize(),this.scrollTo(this._currentScrollIndex,!1)}scrollTo(e,l=!0){let s=e;l&&(s-=Math.floor(this._layout.getNumberOfVisibleThumbs()/2));const o=this._normalizeIndex(s);this._currentScrollIndex=o;const i=-o*this._layout.getThumbSizeRem();this._scroller.scrollTo(i,!0),this._scrollIndexChangedCallbacks.forEach(n=>{n(this._currentScrollIndex)})}scrollNext(){let e=this._currentScrollIndex+this._layout.getNumberOfVisibleThumbs();const l=this._layout.getNumberOfThumbs()-this._layout.getNumberOfVisibleThumbs();this._currentScrollIndex===l?e=0:e>=l&&(e=l),this.scrollTo(e,!1)}scrollPrevious(){let e=this._currentScrollIndex-this._layout.getNumberOfVisibleThumbs();const l=this._layout.getNumberOfThumbs()-this._layout.getNumberOfVisibleThumbs();this._currentScrollIndex===0?e=l:e<0&&(e=0),this.scrollTo(e,!1)}addScrollIndexChangedCallback(e){this._scrollIndexChangedCallbacks.includes(e)||this._scrollIndexChangedCallbacks.push(e)}_normalizeIndex(e){const l=this._layout.getNumberOfThumbs()-this._layout.getNumberOfVisibleThumbs();return e>=l?l:e<0?0:e}}export{_ as default};
//# sourceMappingURL=ThumbScroller.js.map
